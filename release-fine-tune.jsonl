{"input": "How are Release environments built?", "output": "Release environments are built from an Application Template using default environment variables. The Application Template defines high-level concepts like the Kubernetes cluster, domain, hostnames, and resources allocated to your services."}
{"input": "How do developers interact with Release?","output": "Developers generally interact with Release by creating a pull request in their VCS (version control system), which automatically creates an environment with the code changes in the PR. Webhooks are calls made from your VCS back to Release when certain events happen."}
{"input": "How does Release eliminate time spent managing environments?","output": "With Release, all of the management and tooling required to build a flexible environment ecosystem comes out of the box. You can create an application template using default environment variables."}
{"input": "How does Release handle static sites?", "output": "Release supports standalone static sites running without Docker backends. These sites are pushed into a CDN and hosted on your behalf."}
{"input": "How does Release help in managing environments?", "output": "With Release, all of the management and tooling required to build a flexible environment ecosystem comes out of the box. You just connect your repositories, review your environment template and environment variables, and let Release do the rest."}
{"input": "How does Release integrate into developer workflows?", "output": "Release integrates environments into developer workflows for a delightful developer experience, allowing for easy microservice development and removing software delivery bottlenecks."}
{"input": "How does Release support hybrid sites?", "output": "Release supports applications with both static frontends and other Dockerized services. When both a package.json and a docker-compose.yaml file are present in a repo, Release will automatically detect them and provide options to build these services correctly."}
{"input": "How does release.com work?", "output": "When a developer flags a Pull Request as needing an ephemeral environment, Release.com creates a new copy of the entire app, including databases and other dependencies, then updates the GitHub PR with a comment with URLs to access the app in this environment."}
{"input": "What is needed to integrate your cloud provider with Release?", "output": "To integrate your cloud provider with Release, you will need to go to Account Settings > Integrations where you will be walked through a simple set up procedure to connect your AWS account to Release."}
{"input": "What is Release?", "output": "Release makes it easy to manage environments so your team can focus on building value for your customers. Release can build environments in our cloud or yours, from the simplest applications (static JavaScript) to the most complex (microservices with many cloud-native dependencies)."}
{"input": "What is required to run Docker-based applications in Release?", "output": "In order to run Docker-based applications in Release, you need a working Docker build and a docker-compose.yml file that will run all the services you need."}
{"input": "What is the benefit of using Release for development teams?", "output": "Development teams can create an infinite number of development, staging, demo, and production environments without ever having to deal with the underlying infrastructure."}
{"input": "What is the difference between ephemeral and permanent environments?","output": "Ephemeral environments are environments that live for the duration of a pull request or are created manually. Permanent environments are environments that are not destroyed, typically used for traditional staging or production workloads."}
{"input": "What mechanisms does Release support for creating application templates and environment variables defaults?","output": "Release supports writing your own templates from a library of examples for common frameworks and services, automatically generating templates by parsing the docker-compose.yaml file found in your repository, automatically generating templates by parsing package.json files for JavaScript applications, generating environment definitions from your Kubernetes YAML files, and generating templates from Helm charts."}
{"input": "What mechanisms does Release use to create application templates?", "output": "Release can write your own templates from a library of examples, automatically generate templates by parsing docker-compose.yaml or package.json files, generate environment definitions from Kubernetes YAML files, or generate templates from Helm charts."}
{"input": "What types of environments can be created with Release?", "output": "Release enables the creation of parallel environment infrastructure, scalable environments for performance testing, sales demo environments, and production environments based on Kubernetes."}
{"input": "What types of environments does Release support?", "output": "Release supports production and pre-production environments and automates every step from code push to environment creation."}
{"input": "Where do applications and environments run?","output": "Applications and environments created with a Release Starter Account are hosted in the Release cloud. If you have a Professional Account or higher, applications run on a Kubernetes cluster in your AWS account (optional) and static sites are hosted by CloudFront."}
